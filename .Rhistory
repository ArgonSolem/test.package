devtools::document()
library(devtools)
install.packages("devtools")
install.packages("usethis")
library(devtools)
library(usethis)
devtools::document()
#' Generación de frecuencias univariadas
#'
#' Description of what it does
#'
#' @param .base A dataframe.
#' @param .var A column name.
#' @param .wt Optional weights.
#' @param na.rm Logical, whether to remove NAs.
#'
#' @return A tibble with counts and percentages.
#' @export
tablas_univariadasl <- function(.base, .var, .wt = NULL, na.rm = TRUE) {
# Validate if the column exists in .base
existing_var <- .base %>% select({{ .var }}) %>% names()
assert_that(existing_var %in% colnames(.base), msg = glue("Column '{.var_label}' doesn't exist."))
data_var <- .base %>%
mutate(!!quo_name(enquo(.var)) := to_label({{ .var }})) %>%
{if (na.rm) filter(., !is.na({{ .var }})) else .} %>%
count({{ .var }}, wt = {{.wt}}, name = "n") %>%
mutate(pct = n/sum(n,na.rm = TRUE))
return(data_var)
}
devtools::document()
#' Generación de frecuencias univariadas
#'
#' Description of what it does
#'
#' @param .base A dataframe.
#' @param .var A column name.
#' @param .wt Optional weights.
#' @param na.rm Logical, whether to remove NAs.
#'
#' @return A tibble with counts and percentages.
#' @export
tablas_univariadas <- function(.base, .var, .wt = NULL, na.rm = TRUE) {
# Validate if the column exists in .base
existing_var <- .base %>% select({{ .var }}) %>% names()
assert_that(existing_var %in% colnames(.base), msg = glue("Column '{.var_label}' doesn't exist."))
data_var <- .base %>%
mutate(!!quo_name(enquo(.var)) := to_label({{ .var }})) %>%
{if (na.rm) filter(., !is.na({{ .var }})) else .} %>%
count({{ .var }}, wt = {{.wt}}, name = "n") %>%
mutate(pct = n/sum(n,na.rm = TRUE))
return(data_var)
}
devtools::document()
tablas_univariadas?
devtools::load_all()
devtools::install()
devtools::document()
devtools::load_all()
# Packages ----------------------------------------------------------------
pacman::p_load(tidyverse,
haven,
readxl,
openxlsx,
sjmisc,
sjlabelled,
expss,
writexl,
labelled,
lubridate,
assertthat)
# Cargar bases ------------------------------------------------------------
set.seed(555)
generate_random_df <- function(num_cols, num_rows) {
tibble::tibble(
SbjNum = 1:num_rows,
!!!setNames(lapply(1:num_cols, function(x) sample(1:5, num_rows, replace = TRUE)), paste0("P", 1:num_cols)),
Ponderador = 2
)
}
base <- generate_random_df(num_cols = 30, num_rows = 500)
base <- base %>% mutate(P55 = 6 - P5)
base$P5[c(5:55)] <- NA
base <- base %>%
mutate(across(matches("^P[0-9]+$"),
~ .x %>%
set_label(label = str_glue("{cur_column()}. Etiqueta correspondiente a pregunta {cur_column()}")) %>%
set_labels(labels = setNames(1:5, LETTERS[1:5]))
))
base %>% tablas_univariadas(B5, na.rm = FALSE)(P5, na.rm = FALSE)
base %>% tablas_univariadas(P5, na.rm = FALSE)(P5, na.rm = FALSE)
View(base)
base %>% tablas_univariadas(P5, na.rm = FALSE)
devtools::document()
library(Test.package)
devtools::check()
pkgbuild::check_build_tools(debug = TRUE)
devtools::install()
devtools::uninstall()
devtools::install()
devtools::load_all()
usethis::use_r("tablas_univariadas")
usethis::use_r("tablas_resp_multiple")
devtools::load_all()
devtools::document()
devtools::install()
devtools::uninstall(Test.package)
devtools::uninstall("Test.package")
devtools::uninstall(pkg = "Test.package")
remove.packages("Test.package")
remove.packages("Test.package")
remove.packages("test.package")
devtools::load_all()
devtools::document()
devtools::install()
devtools::document()
tablas_univariadas?
return(data_var)
tablas_resp_multiple <- function(.base, .vars, .wt = NULL, na.rm = TRUE) {
data_var <- .base %>%
select({{ .vars }}) %>% # Select relevant columns
pivot_longer(cols = everything(), names_to = "variable", values_to = "response") %>%
mutate(response = to_label(response)) %>% # Convert responses to labels
{if (na.rm) filter(., !is.na(response)) else .} %>%
count(response, wt = {{.wt}}, name = "n") %>%  # Count occurrences of each response
mutate(pct = n / sum(n, na.rm = TRUE))  # Calculate percentage
return(data_var)
}
devtools::load_all()
devtools::load_all()
devtools::update_packages()
devtools::install()
devtools::load_all()
devtools::document()
usethis::use_package("dplyr")
usethis::use_package("rlang")
usethis::use_package("assertthat")
usethis::use_package("glue")
usethis::use_package("tibble")
devtools::document()
devtools::install()
3
devtools::check()
devtools::check()
pkgbuild::check_build_tools(debug = TRUE)
pkgbuild::check_build_tools(debug = TRUE)
devtools::check()
devtools::document()
devtools::check()
usethis::use_mit_license()
devtools::check()
devtools::document()
devtools::load_all()
devtools::install()
